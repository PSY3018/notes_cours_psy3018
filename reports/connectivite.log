Traceback (most recent call last):
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/pbellec/env/psy3018/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Importe les librairies
import numpy as np
import matplotlib.pyplot as plt
from nilearn.image import math_img
from nilearn import plotting, input_data
from nilearn.input_data import NiftiLabelsMasker
from nilearn import datasets # Fetch data using nilearn
from nilearn.input_data import NiftiMasker


import warnings
warnings.filterwarnings("ignore")

# Initialise la figure
fig = plt.figure(figsize=(13, 5), dpi=300)

# Importe les donn√©es
basc = datasets.fetch_atlas_basc_multiscale_2015() # the BASC multiscale atlas
adhd = datasets.fetch_adhd(n_subjects=10)          # ADHD200 preprocessed data (Athena pipeline)\

# Param√®tres du pr√©-traitement
num_data = 6
fwhm = 8
high_pass = 0.01
high_variance_confounds = False
time_samp = range(0, 100)

# Extrait le signal par parcelle pour un atlas fonctionnel (BASC)
masker = input_data.NiftiLabelsMasker(
                                      basc['scale122'],
                                      resampling_target="data",
                                      high_pass=high_pass,
                                      t_r=3,
                                      high_variance_confounds=high_variance_confounds,
                                      standardize=True,
                                      memory='nilearn_cache',
                                      memory_level=1,
                                      smoothing_fwhm=fwhm).fit()
tseries = masker.transform(adhd.func[num_data])
print(f"Time series with shape {tseries.shape} (# time points, # parcels))")

# Charge les donn√©es par voxel
masker_voxel = input_data.NiftiMasker(high_pass=high_pass,
                                      t_r=3,
                                      high_variance_confounds=high_variance_confounds,
                                      standardize=True,
                                      smoothing_fwhm=fwhm
                                     ).fit(adhd.func[num_data])
tseries_voxel = masker_voxel.transform(adhd.func[num_data])
print(f"Time series with shape {tseries_voxel.shape} (# time points, # voxels))")

# Montre une parcelle
ax_plot = plt.subplot2grid((2, 5), (0, 0), colspan=2)
num_parcel = 73
plotting.plot_roi(math_img(f'img == {num_parcel}', img=basc['scale122']),
                  threshold=0.5,
                  axes=ax_plot,
                  vmax=1,
                  title="r√©gion cible (M1 droit)")

# plot la s√©rie temporelle d'une r√©gion
ax_plot = plt.subplot2grid((2, 5), (0, 2), colspan=1)
time = np.linspace(0, 3 * (tseries.shape[0]-1), tseries.shape[0])
plt.plot(time[time_samp], tseries[time_samp, :][:, num_parcel]),
plt.title('S√©rie temporelle'),
plt.ylabel('BOLD (u.a.)')

# carte de connectivit√©
ax_plot = plt.subplot2grid((2, 5), (0, 3), colspan=2)
seed_to_voxel_correlations = (np.dot(tseries_voxel.T, tseries[:, num_parcel-1]) / tseries.shape[0])# Show the connectivity map
conn_map = masker_voxel.inverse_transform(seed_to_voxel_correlations.T)
plotting.plot_stat_map(conn_map,
                       threshold=0.5,
                       vmax=1,
                       axes=ax_plot,
                       cut_coords=(37, -20, 59),
                       title="carte de connectivit√© (M1 droit)")

# Montre une parcelle
num_parcel = 17
ax_plot = plt.subplot2grid((2, 5), (1, 0), colspan=2)
plotting.plot_roi(math_img(f'img == {num_parcel}', img=basc['scale122']),
                  threshold=0.5,
                  vmax=1,
                  axes=ax_plot,
                  title="r√©gion cible (PCC)")

# plot la s√©rie temporelle d'une r√©gion
ax_plot = plt.subplot2grid((2, 5), (1, 2), colspan=1)
time = np.linspace(0, 3 * (tseries.shape[0]-1), tseries.shape[0])
plt.plot(time[time_samp, :], tseries[time_samp, :][:, num_parcel]),
plt.xlabel('Temps (s.)'),
plt.ylabel('BOLD (u.a.)')

# carte de connectivit√©
ax_plot = plt.subplot2grid((2, 5), (1, 3), colspan=2)
seed_to_voxel_correlations = (np.dot(tseries_voxel.T, tseries[:, num_parcel-1]) / tseries.shape[0])# Show the connectivity map
conn_map = masker_voxel.inverse_transform(seed_to_voxel_correlations.T)
plotting.plot_stat_map(conn_map,
                       threshold=0.5,
                       cut_coords=(0, -52, 26),
                       vmax=1,
                       axes=ax_plot,
                       title="carte de connectivit√© (PCC)")

from myst_nb import glue
glue("fcmri-map-fig", fig, display=False)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-1-6e1316ff9303>[0m in [0;36m<module>[0;34m[0m
[1;32m     89[0m [0max_plot[0m [0;34m=[0m [0mplt[0m[0;34m.[0m[0msubplot2grid[0m[0;34m([0m[0;34m([0m[0;36m2[0m[0;34m,[0m [0;36m5[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m)[0m[0;34m,[0m [0mcolspan[0m[0;34m=[0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     90[0m [0mtime[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mlinspace[0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m3[0m [0;34m*[0m [0;34m([0m[0mtseries[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m-[0m[0;36m1[0m[0;34m)[0m[0;34m,[0m [0mtseries[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 91[0;31m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mtime[0m[0;34m[[0m[0mtime_samp[0m[0;34m,[0m [0;34m:[0m[0;34m][0m[0;34m,[0m [0mtseries[0m[0;34m[[0m[0mtime_samp[0m[0;34m,[0m [0;34m:[0m[0;34m][0m[0;34m[[0m[0;34m:[0m[0;34m,[0m [0mnum_parcel[0m[0;34m][0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     92[0m [0mplt[0m[0;34m.[0m[0mxlabel[0m[0;34m([0m[0;34m'Temps (s.)'[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     93[0m [0mplt[0m[0;34m.[0m[0mylabel[0m[0;34m([0m[0;34m'BOLD (u.a.)'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mIndexError[0m: too many indices for array: array is 1-dimensional, but 2 were indexed
IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

